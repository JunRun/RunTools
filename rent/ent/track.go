// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/JunRun/RunTools/rent/ent/track"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Track is the model entity for the Track schema.
type Track struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Track) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // date
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Track fields.
func (t *Track) assignValues(values ...interface{}) error {
	if m, n := len(values), len(track.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	t.ID = int64(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field date", values[0])
	} else if value.Valid {
		t.Date = value.Time
	}
	return nil
}

// Update returns a builder for updating this Track.
// Note that, you need to call Track.Unwrap() before calling this method, if this Track
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Track) Update() *TrackUpdateOne {
	return (&TrackClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Track) Unwrap() *Track {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Track is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Track) String() string {
	var builder strings.Builder
	builder.WriteString("Track(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", date=")
	builder.WriteString(t.Date.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Tracks is a parsable slice of Track.
type Tracks []*Track

func (t Tracks) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
