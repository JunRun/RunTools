// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"time"

	"github.com/JunRun/RunTools/rent/ent/track"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// TrackCreate is the builder for creating a Track entity.
type TrackCreate struct {
	config
	id   *int64
	date *time.Time
}

// SetDate sets the date field.
func (tc *TrackCreate) SetDate(t time.Time) *TrackCreate {
	tc.date = &t
	return tc
}

// SetID sets the id field.
func (tc *TrackCreate) SetID(i int64) *TrackCreate {
	tc.id = &i
	return tc
}

// Save creates the Track in the database.
func (tc *TrackCreate) Save(ctx context.Context) (*Track, error) {
	if tc.date == nil {
		return nil, errors.New("ent: missing required field \"date\"")
	}
	return tc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TrackCreate) SaveX(ctx context.Context) *Track {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tc *TrackCreate) sqlSave(ctx context.Context) (*Track, error) {
	var (
		t     = &Track{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: track.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: track.FieldID,
			},
		}
	)
	if value := tc.id; value != nil {
		t.ID = *value
		_spec.ID.Value = *value
	}
	if value := tc.date; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: track.FieldDate,
		})
		t.Date = *value
	}
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if t.ID == 0 {
		id := _spec.ID.Value.(int64)
		t.ID = int64(id)
	}
	return t, nil
}
