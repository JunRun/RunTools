// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/JunRun/RunTools/rent/ent/predicate"
	"github.com/JunRun/RunTools/rent/ent/track"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// TrackDelete is the builder for deleting a Track entity.
type TrackDelete struct {
	config
	predicates []predicate.Track
}

// Where adds a new predicate to the delete builder.
func (td *TrackDelete) Where(ps ...predicate.Track) *TrackDelete {
	td.predicates = append(td.predicates, ps...)
	return td
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (td *TrackDelete) Exec(ctx context.Context) (int, error) {
	return td.sqlExec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (td *TrackDelete) ExecX(ctx context.Context) int {
	n, err := td.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (td *TrackDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: track.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: track.FieldID,
			},
		},
	}
	if ps := td.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return sqlgraph.DeleteNodes(ctx, td.driver, _spec)
}

// TrackDeleteOne is the builder for deleting a single Track entity.
type TrackDeleteOne struct {
	td *TrackDelete
}

// Exec executes the deletion query.
func (tdo *TrackDeleteOne) Exec(ctx context.Context) error {
	n, err := tdo.td.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{track.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tdo *TrackDeleteOne) ExecX(ctx context.Context) {
	tdo.td.ExecX(ctx)
}
